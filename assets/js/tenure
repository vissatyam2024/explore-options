/**
  * Same Tenure Scenario manager for the Explore Options component
  */
class tenure {
  constructor(config = {}) {
    // Default loan parameters
    this.loanData = config.loanData || {
      amount: 10000000,        // Principal amount (₹1 crore)
      currentRate: 9,          // Current interest rate (9%)
      newRate: 8.1,            // New interest rate (8.1%)
      currentEMI: 89973,       // Current EMI amount
      tenure: 240              // months
    };
    
    // Get DOM elements
    this.newEMIValue = document.querySelector('#same-tenure .metric:nth-child(1) .metric-value');
    this.monthlySavingsValue = document.querySelector('#same-tenure .metric:nth-child(2) .metric-value');
    this.totalInterestSavedValue = document.querySelector('#same-tenure2 .metric-row:nth-child(1) .metric-value');
    
    // Get subtext elements
    this.newEMISubtext = document.querySelector('#same-tenure .metric:nth-child(1) .metric-subtext');
    this.monthlySavingsSubtext = document.querySelector('#same-tenure .metric:nth-child(2) .metric-subtext');
    this.totalInterestSavedSubtext = document.querySelector('#same-tenure2 .metric-row:nth-child(1) .metric-subtext');
    
    // Initialize calculations
    this.updateCalculations();
  }
  
  /**
   * Calculate the EMI amount using loan parameters
   * @param {number} principal - Loan amount
   * @param {number} rate - Annual interest rate in percentage
   * @param {number} tenure - Loan tenure in months
   * @returns {number} EMI amount
   */
  calculateEMI(principal, rate, tenure) {
    const monthlyRate = rate / 12 / 100;
    const emi = principal * monthlyRate * Math.pow(1 + monthlyRate, tenure) / (Math.pow(1 + monthlyRate, tenure) - 1);
    return Math.round(emi);
  }
  
  /**
   * Update all calculations for the Same Tenure tab
   */
  updateCalculations() {
    // Calculate new EMI with new interest rate
    const newEMI = this.calculateEMI(
      this.loanData.amount,
      this.loanData.newRate,
      this.loanData.tenure
    );
    
    // Calculate monthly savings
    const monthlySavings = this.loanData.currentEMI - newEMI;
    
    // Calculate total interest saved over loan term
    const totalInterestSaved = monthlySavings * this.loanData.tenure;
    
    // Calculate percentage reduction in EMI
    const percentageReduction = (monthlySavings / this.loanData.currentEMI) * 100;
    
    // Update DOM if elements exist
    if (this.newEMIValue) {
      this.newEMIValue.textContent = `₹${this.formatCurrency(newEMI)}`;
    }
    
    if (this.monthlySavingsValue) {
      this.monthlySavingsValue.textContent = `₹${this.formatCurrency(monthlySavings)}`;
      this.monthlySavingsValue.classList.add('value-positive');
    }
    
    if (this.totalInterestSavedValue) {
      this.totalInterestSavedValue.textContent = `₹${this.formatCurrency(totalInterestSaved)}`;
      this.totalInterestSavedValue.classList.add('value-positive');
    }
    
    // Update subtexts
    if (this.newEMISubtext) {
      this.newEMISubtext.textContent = `ws ₹${this.formatCurrency(this.loanData.currentEMI)}`;
    }
    
    if (this.monthlySavingsSubtext) {
      this.monthlySavingsSubtext.textContent = `${percentageReduction.toFixed(1)}% less`;
    }
    
    if (this.totalInterestSavedSubtext) {
      this.totalInterestSavedSubtext.textContent = `over loan term`;
    }
    
    // Store calculated values for reference
    this.calculatedValues = {
      newEMI: newEMI,
      monthlySavings: monthlySavings,
      totalInterestSaved: totalInterestSaved,
      percentageReduction: percentageReduction
    };
    
    return this.calculatedValues;
  }
  
  /**
   * Format a number as currency with thousands separators
   * @param {number} value - The number to format
   * @returns {string} Formatted string
   */
  formatCurrency(value) {
    return value.toLocaleString('en-IN');
  }
  
  /**
   * Get the current scenario data
   * @returns {Object} The current scenario data
   */
  getCurrentScenario() {
    return this.calculatedValues || this.updateCalculations();
  }
  
  /**
   * Update the loan data and recalculate
   * @param {Object} loanData - New loan data
   */
  updateLoanData(loanData) {
    this.loanData = { ...this.loanData, ...loanData };
    return this.updateCalculations();
  }
}